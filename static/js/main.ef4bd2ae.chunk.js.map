{"version":3,"sources":["components/Speed/Speed.js","components/Controls/Controls.js","utils.js","components/Timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Speed","handleChangeSpeed","speed","props","this","isStart","className","classNames","onClick","PureComponent","Controls","handleChangeTime","value","target","handleStart","type","disabled","onChange","placeholder","formatUnitOfTime","unitOfTime","substring","toString","Pause","version","x","y","viewBox","d","Timer","state","time","startTime","status","handleChange","key","setState","interval","setInterval","prev","clearInterval","handleStop","renderMessage","renderTime","timeInSeconds","minutes","Math","floor","seconds","getTime","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VA6CeA,G,iNAhCbC,kBAAoB,SAAAC,GAAK,OAAI,WAC3B,EAAKC,MAAMF,kBAAkBC,K,wEAGrB,IAAD,EACoBE,KAAKD,MAAxBD,EADD,EACCA,MAAOG,EADR,EACQA,QAEf,OACE,yBAAKC,UAAW,gBACd,yBACEA,UAAWC,IAAW,aAAc,CAAE,SAAsB,IAAVL,EAAa,WAAcG,IAC7EG,QAASJ,KAAKH,kBAAkB,IAFlC,MAMA,yBACEK,UAAWC,IAAW,aAAc,CAAE,SAAsB,MAAVL,EAAe,WAAcG,IAC/EG,QAASJ,KAAKH,kBAAkB,MAFlC,QAMA,yBACEK,UAAWC,IAAW,aAAc,CAAE,SAAsB,IAAVL,EAAa,WAAcG,IAC7EG,QAASJ,KAAKH,kBAAkB,IAFlC,W,GA5BYQ,kBCwBLC,G,iNAjBbC,iBAAmB,YAA4B,IAAfC,EAAc,EAAxBC,OAAUD,MAC9B,EAAKT,MAAMQ,iBAAyB,GAARC,I,wEAGpB,IAAD,EAC0BR,KAAKD,MAA9BW,EADD,EACCA,YAAaT,EADd,EACcA,QAErB,OACE,yBAAKC,UAAU,mBACb,yCACA,2BAAOA,UAAU,QAAQS,KAAK,SAASC,SAAUX,EAASY,SAAUb,KAAKO,iBAAkBO,YAAY,UACvG,4BAAQZ,UAAU,MAAMU,SAAUX,EAASG,QAASM,GAApD,c,GAlBeL,kBCChB,SAASU,EAAiBC,GAC/B,OAAOA,EAAa,GAAK,WAAIA,GAAaC,UAAU,EAAG,GAAKD,EAAWE,WAAWD,UAAU,EAAG,G,MCAjG,SAASE,EAAMpB,GACb,OACE,yBACEqB,QAAQ,MACRC,EAAE,MACFC,EAAE,MACFC,QAAQ,sBACRrB,UAAWH,EAAMG,UACjBE,QAASL,EAAMK,SAEf,2BACE,0BAAMoB,EAAE,mWAIR,0BAAMA,EAAE,wJAER,0BAAMA,EAAE,qJ,IAqHDC,E,2MA5GbC,MAAQ,CACNC,KAAM,EACNC,UAAW,EACXC,QAAQ,EACR5B,SAAS,EACTH,MAAO,G,EAOTgC,aAAe,SAAAC,GAAG,OAAI,SAAAvB,GACR,SAARuB,GACF,EAAKC,SAAS,CACZJ,UAAWpB,IAGf,EAAKwB,SAAL,eAAiBD,EAAMvB,M,EAGzBE,YAAc,WACZ,EAAKuB,SAAWC,aAAY,WACF,IAApB,EAAKR,MAAMC,MACb,EAAKK,UAAS,SAAAG,GAAI,MAAK,CAAER,KAAMQ,EAAKR,KAAO,MACvC,EAAKD,MAAME,UAAY,EAAKF,MAAMC,OAAS,GAC7C,EAAKK,SAAS,CAAEH,OAAQ,aAEF,KAApB,EAAKH,MAAMC,MACb,EAAKK,SAAS,CAAEH,OAAQ,WAEF,KAApB,EAAKH,MAAMC,MACb,EAAKK,SAAS,CAAEH,OAAQ,aAG1B,EAAKG,SAAS,CAAEL,KAAM,EAAGE,OAAQ,YAEjCO,cAAc,EAAKH,aAEpB,IAAO,EAAKP,MAAM5B,OAErB,EAAKkC,SAAS,CAAE/B,SAAS,K,EAG3BoC,WAAa,WACXD,cAAc,EAAKH,UAEnB,EAAKD,SAAS,CAAE/B,SAAS,K,EAG3BqC,cAAgB,WAAO,IACbT,EAAW,EAAKH,MAAhBG,OACR,OAAQA,GACN,IAAK,WACL,IAAK,SACL,IAAK,SACH,OAAO,uBACL3B,UAAWC,IAAW,WACpB,CACE,MAAoB,WAAX0B,EACT,IAAkB,WAAXA,KAJN,4BAUT,QAAS,OAAO,uBAAG3B,UAAU,YAAb,qB,EAIpBqC,WAAa,WAAO,IAAD,EACS,EAAKb,MAAvBC,EADS,EACTA,KAAM1B,EADG,EACHA,QAEd,OACE,yBACEC,UAAWC,IAAW,SD7GvB,SAAiBqC,GACtB,IAAMC,EAAU1B,EAAiB2B,KAAKC,MAAMH,EAAgB,KACtDI,EAAU7B,EAAiB2B,KAAKC,MAAMH,EAAgB,KAE5D,MAAM,GAAN,OAAUC,EAAV,YAAqBG,GC2GdC,CAAQlB,GACT,kBAACR,EAAD,CACEf,QAAS,EAAKiC,WACdnC,UAAWC,IAAW,QAAS,CAAE,WAAcF,Q,sFAvErDmC,cAAcpC,KAAKiC,Y,+BA6EX,IAAD,EAC4BjC,KAAK0B,MAAhCG,EADD,EACCA,OAAQ/B,EADT,EACSA,MAAOG,EADhB,EACgBA,QAEvB,OACE,yBAAKC,UAAU,SACb,kBAAC,EAAD,CACED,QAASA,EACTS,YAAaV,KAAKU,YAClBH,iBAAkBP,KAAK8B,aAAa,UAErCD,EAAS7B,KAAKsC,gBAAkB,KAChCtC,KAAKuC,aACN,kBAAC,EAAD,CACEtC,QAASA,EACTJ,kBAAmBG,KAAK8B,aAAa,SACrChC,MAAOA,S,GAvGGO,iBCjBLyC,G,uLARX,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,W,GAJU6C,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ef4bd2ae.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './Speed.css';\n\nclass Speed extends PureComponent {\n  static propTypes = {\n    speed: PropTypes.number.isRequired,\n    isStart: PropTypes.bool.isRequired,\n    handleChangeSpeed: PropTypes.func.isRequired\n  }\n\n  handleChangeSpeed = speed => () => {\n    this.props.handleChangeSpeed(speed);\n  }\n\n  render() {\n    const { speed, isStart } = this.props;\n\n    return (\n      <div className={'speedWrapper'}>\n        <div\n          className={classNames('speedBlock', { 'isActive': speed === 1, 'isDisabled': isStart })}\n          onClick={this.handleChangeSpeed(1)}\n        >\n          1X\n        </div>\n        <div\n          className={classNames('speedBlock', { 'isActive': speed === 1.5, 'isDisabled': isStart })}\n          onClick={this.handleChangeSpeed(1.5)}\n        >\n          1.5X\n        </div>\n        <div\n          className={classNames('speedBlock', { 'isActive': speed === 2, 'isDisabled': isStart })}\n          onClick={this.handleChangeSpeed(2)}\n        >\n          2X\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Speed;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\n\nimport './Controls.css';\n\nclass Controls extends PureComponent {\n  static propTypes = {\n    handleStart: PropTypes.func.isRequired,\n    isStart: PropTypes.bool.isRequired,\n    handleChangeTime: PropTypes.func.isRequired\n  }\n\n  handleChangeTime = ({ target: { value } }) => {\n    this.props.handleChangeTime(value * 60);\n  }\n\n  render() {\n    const { handleStart, isStart } = this.props;\n\n    return (\n      <div className='controlsWrapper'>\n        <p>Countdown:</p>\n        <input className='input' type='number' disabled={isStart} onChange={this.handleChangeTime} placeholder='(Min)' />\n        <button className='btn' disabled={isStart} onClick={handleStart}>START</button>\n      </div>\n    );\n  }\n}\n\nexport default Controls;\n","export function getTime(timeInSeconds) {\n  const minutes = formatUnitOfTime(Math.floor(timeInSeconds / 60));\n  const seconds = formatUnitOfTime(Math.floor(timeInSeconds % 60));\n\n  return `${minutes}:${seconds}`;\n}\n\nexport function formatUnitOfTime(unitOfTime) {\n  return unitOfTime < 10 ? `0${unitOfTime}`.substring(0, 2) : unitOfTime.toString().substring(0, 2);\n}\n","import React, { PureComponent } from 'react';\nimport classNames from 'classnames'\nimport Speed from '../Speed';\nimport Controls from '../Controls';\nimport { getTime } from '../../utils'\nimport './Timer.css';\n\n// For svg icon\nfunction Pause(props){\n  return (\n    <svg \n      version=\"1.1\"\n      x=\"0px\"\n      y=\"0px\"\n      viewBox=\"0 0 235.592 235.592\" \n      className={props.className}\n      onClick={props.onClick}\n    >\n      <g>\n        <path d=\"M117.795,0.002C52.843,0.002,0,52.844,0,117.795C0,182.747,52.843,235.59,117.795,235.59\n        c64.953,0,117.797-52.843,117.797-117.795C235.592,52.844,182.748,0.002,117.795,0.002z M117.795,220.59\n        C61.113,220.59,15,174.477,15,117.795C15,61.114,61.113,15.002,117.795,15.002c56.683,0,102.797,46.112,102.797,102.793\n        C220.592,174.477,174.477,220.59,117.795,220.59z\"/>\n        <path d=\"M139.834,68.258c-4.143,0-7.5,3.357-7.5,7.5v84.076c0,4.143,3.357,7.5,7.5,7.5s7.5-3.357,7.5-7.5V75.758\n        C147.334,71.615,143.977,68.258,139.834,68.258z\"/>\n        <path d=\"M95.758,68.258c-4.143,0-7.5,3.357-7.5,7.5v84.076c0,4.143,3.357,7.5,7.5,7.5s7.5-3.357,7.5-7.5V75.758\n        C103.258,71.615,99.9,68.258,95.758,68.258z\"/>\n      </g>\n    </svg>\n  )\n}\n\nclass Timer extends PureComponent {\n\n  state = {\n    time: 0,\n    startTime: 0,\n    status: false,\n    isStart: false,\n    speed: 1\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  handleChange = key => value => {\n    if (key === 'time') {\n      this.setState({\n        startTime: value\n      })\n    }\n    this.setState({ [key]: value })\n  }\n\n  handleStart = () => {\n    this.interval = setInterval(() => {\n      if (this.state.time !== 0) {\n        this.setState(prev => ({ time: prev.time - 1 }));\n        if (this.state.startTime / this.state.time === 2) {\n          this.setState({ status: 'halfTime' })\n        }\n        if (this.state.time === 20) {\n          this.setState({ status: '20Time' })\n        }\n        if (this.state.time === 10) {\n          this.setState({ status: '10Time' })\n        }\n      } else {\n        this.setState({ time: 0, status: 'endTime' });\n\n        clearInterval(this.interval);\n      }\n    }, 1000 / this.state.speed);\n\n    this.setState({ isStart: true });\n  }\n\n  handleStop = () => {\n    clearInterval(this.interval);\n\n    this.setState({ isStart: false });\n  }\n\n  renderMessage = () => {\n    const { status } = this.state;\n    switch (status) {\n      case 'halfTime':\n      case '20Time':\n      case '10Time':\n        return <p\n          className={classNames('timeText',\n            {\n              'blink': status === '10Time',\n              'red': status === '20Time'\n            }\n          )}\n        >\n          More than halfway there!\n        </p>\n      default: return <p className='timeText'>Timeâ€™s up!</p>\n    }\n  }\n\n  renderTime = () => {\n    const { time, isStart } = this.state;\n\n    return (\n      <div\n        className={classNames('time')}\n      >\n        {getTime(time)}\n        <Pause\n          onClick={this.handleStop}\n          className={classNames('pause', { 'isDisabled': isStart })}\n        />\n      </div>\n    )\n  }\n\n  render() {\n    const { status, speed, isStart } = this.state;\n\n    return (\n      <div className='timer'>\n        <Controls\n          isStart={isStart}\n          handleStart={this.handleStart}\n          handleChangeTime={this.handleChange('time')}\n        />\n        {status ? this.renderMessage() : null}\n        {this.renderTime()}\n        <Speed\n          isStart={isStart}\n          handleChangeSpeed={this.handleChange('speed')}\n          speed={speed}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from 'react';\nimport Timer from './components/Timer';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Timer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}